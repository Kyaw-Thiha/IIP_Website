// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}


model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String   // Has to be stored in hash using a salt unique for each user 
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    permission    Permission?
}

model Permission {
    id                      String      @id @default(cuid())
    editAnnouncements       Boolean     @default(false)
    editAlumni              Boolean     @default(false)
    editUsers               Boolean     @default(false)
    user                    User        @relation(fields: [userId], references: [id])
    userId                  String      @unique 

    @@index([userId])
    @@unique([id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model IGCSEClass {
    id         String    @id @default(cuid())
    year       Int
    series     String
    alumni     IGCSEAlumni[]

    @@unique([id])
}

// Each subject columns represent the corresponding grades 
// 360 - A*  (100%)
// 120 - A*  (90% - 99%)
// 40  - A   (80% - 89%)
// 10  - B   (70% - 79%)
// 6   - C   (60% - 69%)
// 4   - D   (50% - 59%)
// 2   - E   (40% - 49%)
// -2  - F   (30% - 39%)
// -4  - G   (20% - 29%)
// -8  - U   (0% - 19%)
// 0   - N/A

model IGCSEAlumni {
    id              String    @id @default(cuid())
    name            String
    image           String 
    esl             Int
    efl             Int
    emaths          Int
    amaths          Int
    chemistry       Int
    physics         Int
    biology         Int
    ict             Int
    cs              Int
    business        Int
    accounting      Int
    economics       Int
    history         Int
    geography       Int
    psychology      Int
    totalGrades     Int
    extraSubjects           String?      // List of extra subjects using comma separated syntax. Eg: ['English Literature', 'Law']  
    extraSubjectsGrades     String?         // List of grades of extra subjects using comma sepatarted syntax. Eg: [8, 9]
    classId     String
    class      IGCSEClass     @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([classId])
    @@unique([id])
}

model ALevelClass {
    id         String    @id @default(cuid())
    year       Int
    series     String
    alumni     ALevelAlumni[]

    @@unique([id])
}

// Each subject columns represent the corresponding grades 
// 360 - A*  (100%)
// 120 - A*  (90% - 99%)
// 40  - A   (80% - 89%)
// 10  - B   (70% - 79%)
// 6   - C   (60% - 69%)
// 4   - D   (50% - 59%)
// 2   - E   (40% - 49%)
// -2  - F   (30% - 39%)
// -4  - G   (20% - 29%)
// -8  - U   (0% - 19%)
// 0   - N/A

model ALevelAlumni {
    id              String    @id @default(cuid())
    name            String
    image           String
    english         Int 
    pureMaths       Int
    furtherMaths    Int 
    physics         Int 
    chemistry       Int
    biology         Int
    it              Int
    cs              Int
    business        Int
    accounting      Int
    economics       Int
    history         Int
    geography       Int
    psychology      Int
    totalGrades     Int
    extraSubjects           String?      // List of extra subjects using comma separated syntax. Eg: ['Geography', 'History']  
    extraSubjectsGrades     String?         // List of grades of extra subjects using comma sepatarted syntax. Eg: [8, 9]
    classId         String
    class      ALevelClass     @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([classId])
    @@unique([id])
}

model Announcement {
    id          String    @id @default(cuid())
    title       String
    image       String 
    text        String  
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([id])
}
